/*
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StatusCodesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatusCodesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StatusCodesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call returnRandomCodeCall(String codes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status/{codes}"
            .replace("{" + "codes" + "}", localVarApiClient.escapeString(codes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnRandomCodeValidateBeforeCall(String codes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codes' is set
        if (codes == null) {
            throw new ApiException("Missing the required parameter 'codes' when calling returnRandomCode(Async)");
        }

        return returnRandomCodeCall(codes, _callback);

    }


    private ApiResponse<Void> returnRandomCodeWithHttpInfo(String codes) throws ApiException {
        okhttp3.Call localVarCall = returnRandomCodeValidateBeforeCall(codes, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call returnRandomCodeAsync(String codes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnRandomCodeValidateBeforeCall(codes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReturnRandomCodeRequestBuilder {
        private final String codes;

        private ReturnRandomCodeRequestBuilder(String codes) {
            this.codes = codes;
        }

        /**
         * Build call for returnRandomCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return returnRandomCodeCall(codes, _callback);
        }


        /**
         * Execute returnRandomCode request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            returnRandomCodeWithHttpInfo(codes);
        }

        /**
         * Execute returnRandomCode request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return returnRandomCodeWithHttpInfo(codes);
        }

        /**
         * Execute returnRandomCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return returnRandomCodeAsync(codes, _callback);
        }
    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @return ReturnRandomCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public ReturnRandomCodeRequestBuilder returnRandomCode(String codes) throws IllegalArgumentException {
        if (codes == null) throw new IllegalArgumentException("\"codes\" is required but got null");
            

        return new ReturnRandomCodeRequestBuilder(codes);
    }
    private okhttp3.Call returnRandomCode_0Call(String codes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status/{codes}"
            .replace("{" + "codes" + "}", localVarApiClient.escapeString(codes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnRandomCode_0ValidateBeforeCall(String codes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codes' is set
        if (codes == null) {
            throw new ApiException("Missing the required parameter 'codes' when calling returnRandomCode_0(Async)");
        }

        return returnRandomCode_0Call(codes, _callback);

    }


    private ApiResponse<Void> returnRandomCode_0WithHttpInfo(String codes) throws ApiException {
        okhttp3.Call localVarCall = returnRandomCode_0ValidateBeforeCall(codes, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call returnRandomCode_0Async(String codes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnRandomCode_0ValidateBeforeCall(codes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReturnRandomCode0RequestBuilder {
        private final String codes;

        private ReturnRandomCode0RequestBuilder(String codes) {
            this.codes = codes;
        }

        /**
         * Build call for returnRandomCode_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return returnRandomCode_0Call(codes, _callback);
        }


        /**
         * Execute returnRandomCode_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            returnRandomCode_0WithHttpInfo(codes);
        }

        /**
         * Execute returnRandomCode_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return returnRandomCode_0WithHttpInfo(codes);
        }

        /**
         * Execute returnRandomCode_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return returnRandomCode_0Async(codes, _callback);
        }
    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @return ReturnRandomCode0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public ReturnRandomCode0RequestBuilder returnRandomCode_0(String codes) throws IllegalArgumentException {
        if (codes == null) throw new IllegalArgumentException("\"codes\" is required but got null");
            

        return new ReturnRandomCode0RequestBuilder(codes);
    }
    private okhttp3.Call returnRandomCode_1Call(String codes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status/{codes}"
            .replace("{" + "codes" + "}", localVarApiClient.escapeString(codes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnRandomCode_1ValidateBeforeCall(String codes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codes' is set
        if (codes == null) {
            throw new ApiException("Missing the required parameter 'codes' when calling returnRandomCode_1(Async)");
        }

        return returnRandomCode_1Call(codes, _callback);

    }


    private ApiResponse<Void> returnRandomCode_1WithHttpInfo(String codes) throws ApiException {
        okhttp3.Call localVarCall = returnRandomCode_1ValidateBeforeCall(codes, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call returnRandomCode_1Async(String codes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnRandomCode_1ValidateBeforeCall(codes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReturnRandomCode1RequestBuilder {
        private final String codes;

        private ReturnRandomCode1RequestBuilder(String codes) {
            this.codes = codes;
        }

        /**
         * Build call for returnRandomCode_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return returnRandomCode_1Call(codes, _callback);
        }


        /**
         * Execute returnRandomCode_1 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            returnRandomCode_1WithHttpInfo(codes);
        }

        /**
         * Execute returnRandomCode_1 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return returnRandomCode_1WithHttpInfo(codes);
        }

        /**
         * Execute returnRandomCode_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return returnRandomCode_1Async(codes, _callback);
        }
    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @return ReturnRandomCode1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public ReturnRandomCode1RequestBuilder returnRandomCode_1(String codes) throws IllegalArgumentException {
        if (codes == null) throw new IllegalArgumentException("\"codes\" is required but got null");
            

        return new ReturnRandomCode1RequestBuilder(codes);
    }
    private okhttp3.Call returnRandomCode_2Call(String codes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status/{codes}"
            .replace("{" + "codes" + "}", localVarApiClient.escapeString(codes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnRandomCode_2ValidateBeforeCall(String codes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codes' is set
        if (codes == null) {
            throw new ApiException("Missing the required parameter 'codes' when calling returnRandomCode_2(Async)");
        }

        return returnRandomCode_2Call(codes, _callback);

    }


    private ApiResponse<Void> returnRandomCode_2WithHttpInfo(String codes) throws ApiException {
        okhttp3.Call localVarCall = returnRandomCode_2ValidateBeforeCall(codes, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call returnRandomCode_2Async(String codes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnRandomCode_2ValidateBeforeCall(codes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReturnRandomCode2RequestBuilder {
        private final String codes;

        private ReturnRandomCode2RequestBuilder(String codes) {
            this.codes = codes;
        }

        /**
         * Build call for returnRandomCode_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return returnRandomCode_2Call(codes, _callback);
        }


        /**
         * Execute returnRandomCode_2 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            returnRandomCode_2WithHttpInfo(codes);
        }

        /**
         * Execute returnRandomCode_2 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return returnRandomCode_2WithHttpInfo(codes);
        }

        /**
         * Execute returnRandomCode_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return returnRandomCode_2Async(codes, _callback);
        }
    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @return ReturnRandomCode2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public ReturnRandomCode2RequestBuilder returnRandomCode_2(String codes) throws IllegalArgumentException {
        if (codes == null) throw new IllegalArgumentException("\"codes\" is required but got null");
            

        return new ReturnRandomCode2RequestBuilder(codes);
    }
    private okhttp3.Call returnRandomCode_3Call(String codes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status/{codes}"
            .replace("{" + "codes" + "}", localVarApiClient.escapeString(codes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnRandomCode_3ValidateBeforeCall(String codes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codes' is set
        if (codes == null) {
            throw new ApiException("Missing the required parameter 'codes' when calling returnRandomCode_3(Async)");
        }

        return returnRandomCode_3Call(codes, _callback);

    }


    private ApiResponse<Void> returnRandomCode_3WithHttpInfo(String codes) throws ApiException {
        okhttp3.Call localVarCall = returnRandomCode_3ValidateBeforeCall(codes, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call returnRandomCode_3Async(String codes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnRandomCode_3ValidateBeforeCall(codes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReturnRandomCode3RequestBuilder {
        private final String codes;

        private ReturnRandomCode3RequestBuilder(String codes) {
            this.codes = codes;
        }

        /**
         * Build call for returnRandomCode_3
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return returnRandomCode_3Call(codes, _callback);
        }


        /**
         * Execute returnRandomCode_3 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            returnRandomCode_3WithHttpInfo(codes);
        }

        /**
         * Execute returnRandomCode_3 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return returnRandomCode_3WithHttpInfo(codes);
        }

        /**
         * Execute returnRandomCode_3 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return returnRandomCode_3Async(codes, _callback);
        }
    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @return ReturnRandomCode3RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public ReturnRandomCode3RequestBuilder returnRandomCode_3(String codes) throws IllegalArgumentException {
        if (codes == null) throw new IllegalArgumentException("\"codes\" is required but got null");
            

        return new ReturnRandomCode3RequestBuilder(codes);
    }
    private okhttp3.Call returnRandomCode_4Call(String codes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/status/{codes}"
            .replace("{" + "codes" + "}", localVarApiClient.escapeString(codes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "TRACE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnRandomCode_4ValidateBeforeCall(String codes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codes' is set
        if (codes == null) {
            throw new ApiException("Missing the required parameter 'codes' when calling returnRandomCode_4(Async)");
        }

        return returnRandomCode_4Call(codes, _callback);

    }


    private ApiResponse<Void> returnRandomCode_4WithHttpInfo(String codes) throws ApiException {
        okhttp3.Call localVarCall = returnRandomCode_4ValidateBeforeCall(codes, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call returnRandomCode_4Async(String codes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnRandomCode_4ValidateBeforeCall(codes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReturnRandomCode4RequestBuilder {
        private final String codes;

        private ReturnRandomCode4RequestBuilder(String codes) {
            this.codes = codes;
        }

        /**
         * Build call for returnRandomCode_4
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return returnRandomCode_4Call(codes, _callback);
        }


        /**
         * Execute returnRandomCode_4 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            returnRandomCode_4WithHttpInfo(codes);
        }

        /**
         * Execute returnRandomCode_4 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return returnRandomCode_4WithHttpInfo(codes);
        }

        /**
         * Execute returnRandomCode_4 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return returnRandomCode_4Async(codes, _callback);
        }
    }

    /**
     * Return status code or random status code if more than one are given
     * 
     * @param codes  (required)
     * @return ReturnRandomCode4RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 100 </td><td> Informational responses </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 300 </td><td> Redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Client Errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Errors </td><td>  -  </td></tr>
     </table>
     */
    public ReturnRandomCode4RequestBuilder returnRandomCode_4(String codes) throws IllegalArgumentException {
        if (codes == null) throw new IllegalArgumentException("\"codes\" is required but got null");
            

        return new ReturnRandomCode4RequestBuilder(codes);
    }
}

/*
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.RedirectsToGivenUrlPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RedirectsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RedirectsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RedirectsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call absolutelyRedirectsNCall(Integer n, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/absolute-redirect/{n}"
            .replace("{" + "n" + "}", localVarApiClient.escapeString(n.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call absolutelyRedirectsNValidateBeforeCall(Integer n, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling absolutelyRedirectsN(Async)");
        }

        return absolutelyRedirectsNCall(n, _callback);

    }


    private ApiResponse<Void> absolutelyRedirectsNWithHttpInfo(Integer n) throws ApiException {
        okhttp3.Call localVarCall = absolutelyRedirectsNValidateBeforeCall(n, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call absolutelyRedirectsNAsync(Integer n, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = absolutelyRedirectsNValidateBeforeCall(n, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AbsolutelyRedirectsNRequestBuilder {
        private final Integer n;

        private AbsolutelyRedirectsNRequestBuilder(Integer n) {
            this.n = n;
        }

        /**
         * Build call for absolutelyRedirectsN
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return absolutelyRedirectsNCall(n, _callback);
        }


        /**
         * Execute absolutelyRedirectsN request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            absolutelyRedirectsNWithHttpInfo(n);
        }

        /**
         * Execute absolutelyRedirectsN request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return absolutelyRedirectsNWithHttpInfo(n);
        }

        /**
         * Execute absolutelyRedirectsN request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return absolutelyRedirectsNAsync(n, _callback);
        }
    }

    /**
     * Absolutely 302 Redirects n times.
     * 
     * @param n  (required)
     * @return AbsolutelyRedirectsNRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
     </table>
     */
    public AbsolutelyRedirectsNRequestBuilder absolutelyRedirectsN(Integer n) throws IllegalArgumentException {
        if (n == null) throw new IllegalArgumentException("\"n\" is required but got null");
        return new AbsolutelyRedirectsNRequestBuilder(n);
    }
    private okhttp3.Call call302redirectsNCall(Integer n, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/redirect/{n}"
            .replace("{" + "n" + "}", localVarApiClient.escapeString(n.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call302redirectsNValidateBeforeCall(Integer n, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling call302redirectsN(Async)");
        }

        return call302redirectsNCall(n, _callback);

    }


    private ApiResponse<Void> call302redirectsNWithHttpInfo(Integer n) throws ApiException {
        okhttp3.Call localVarCall = call302redirectsNValidateBeforeCall(n, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call call302redirectsNAsync(Integer n, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call302redirectsNValidateBeforeCall(n, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class Call302redirectsNRequestBuilder {
        private final Integer n;

        private Call302redirectsNRequestBuilder(Integer n) {
            this.n = n;
        }

        /**
         * Build call for call302redirectsN
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return call302redirectsNCall(n, _callback);
        }


        /**
         * Execute call302redirectsN request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            call302redirectsNWithHttpInfo(n);
        }

        /**
         * Execute call302redirectsN request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return call302redirectsNWithHttpInfo(n);
        }

        /**
         * Execute call302redirectsN request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return call302redirectsNAsync(n, _callback);
        }
    }

    /**
     * 302 Redirects n times.
     * 
     * @param n  (required)
     * @return Call302redirectsNRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
     </table>
     */
    public Call302redirectsNRequestBuilder call302redirectsN(Integer n) throws IllegalArgumentException {
        if (n == null) throw new IllegalArgumentException("\"n\" is required but got null");
        return new Call302redirectsNRequestBuilder(n);
    }
    private okhttp3.Call givenUrlPutRedirectCall(RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = redirectsToGivenUrlPostRequest;

        // create path and map variables
        String localVarPath = "/redirect-to";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call givenUrlPutRedirectValidateBeforeCall(RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'redirectsToGivenUrlPostRequest' is set
        if (redirectsToGivenUrlPostRequest == null) {
            throw new ApiException("Missing the required parameter 'redirectsToGivenUrlPostRequest' when calling givenUrlPutRedirect(Async)");
        }

        return givenUrlPutRedirectCall(redirectsToGivenUrlPostRequest, _callback);

    }


    private ApiResponse<Void> givenUrlPutRedirectWithHttpInfo(RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest) throws ApiException {
        okhttp3.Call localVarCall = givenUrlPutRedirectValidateBeforeCall(redirectsToGivenUrlPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call givenUrlPutRedirectAsync(RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = givenUrlPutRedirectValidateBeforeCall(redirectsToGivenUrlPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GivenUrlPutRedirectRequestBuilder {
        private final String url;
        private Integer statusCode;

        private GivenUrlPutRedirectRequestBuilder(String url) {
            this.url = url;
        }

        /**
         * Set statusCode
         * @param statusCode  (optional)
         * @return GivenUrlPutRedirectRequestBuilder
         */
        public GivenUrlPutRedirectRequestBuilder statusCode(Integer statusCode) {
            this.statusCode = statusCode;
            return this;
        }
        
        /**
         * Build call for givenUrlPutRedirect
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest = buildBodyParams();
            return givenUrlPutRedirectCall(redirectsToGivenUrlPostRequest, _callback);
        }

        private RedirectsToGivenUrlPostRequest buildBodyParams() {
            RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest = new RedirectsToGivenUrlPostRequest();
            redirectsToGivenUrlPostRequest.url(this.url);
            redirectsToGivenUrlPostRequest.statusCode(this.statusCode);
            return redirectsToGivenUrlPostRequest;
        }

        /**
         * Execute givenUrlPutRedirect request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest = buildBodyParams();
            givenUrlPutRedirectWithHttpInfo(redirectsToGivenUrlPostRequest);
        }

        /**
         * Execute givenUrlPutRedirect request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest = buildBodyParams();
            return givenUrlPutRedirectWithHttpInfo(redirectsToGivenUrlPostRequest);
        }

        /**
         * Execute givenUrlPutRedirect request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest = buildBodyParams();
            return givenUrlPutRedirectAsync(redirectsToGivenUrlPostRequest, _callback);
        }
    }

    /**
     * 302/3XX Redirects to the given URL.
     * 
     * @param redirectsToGivenUrlPostRequest  (required)
     * @return GivenUrlPutRedirectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
     </table>
     */
    public GivenUrlPutRedirectRequestBuilder givenUrlPutRedirect(String url) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        return new GivenUrlPutRedirectRequestBuilder(url);
    }
    private okhttp3.Call relatively302RedirectsNCall(Integer n, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/relative-redirect/{n}"
            .replace("{" + "n" + "}", localVarApiClient.escapeString(n.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call relatively302RedirectsNValidateBeforeCall(Integer n, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling relatively302RedirectsN(Async)");
        }

        return relatively302RedirectsNCall(n, _callback);

    }


    private ApiResponse<Void> relatively302RedirectsNWithHttpInfo(Integer n) throws ApiException {
        okhttp3.Call localVarCall = relatively302RedirectsNValidateBeforeCall(n, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call relatively302RedirectsNAsync(Integer n, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = relatively302RedirectsNValidateBeforeCall(n, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class Relatively302RedirectsNRequestBuilder {
        private final Integer n;

        private Relatively302RedirectsNRequestBuilder(Integer n) {
            this.n = n;
        }

        /**
         * Build call for relatively302RedirectsN
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return relatively302RedirectsNCall(n, _callback);
        }


        /**
         * Execute relatively302RedirectsN request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            relatively302RedirectsNWithHttpInfo(n);
        }

        /**
         * Execute relatively302RedirectsN request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return relatively302RedirectsNWithHttpInfo(n);
        }

        /**
         * Execute relatively302RedirectsN request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return relatively302RedirectsNAsync(n, _callback);
        }
    }

    /**
     * Relatively 302 Redirects n times.
     * 
     * @param n  (required)
     * @return Relatively302RedirectsNRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
     </table>
     */
    public Relatively302RedirectsNRequestBuilder relatively302RedirectsN(Integer n) throws IllegalArgumentException {
        if (n == null) throw new IllegalArgumentException("\"n\" is required but got null");
        return new Relatively302RedirectsNRequestBuilder(n);
    }
    private okhttp3.Call toGivenUrlDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/redirect-to";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toGivenUrlDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return toGivenUrlDeleteCall(_callback);

    }


    private ApiResponse<Void> toGivenUrlDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = toGivenUrlDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call toGivenUrlDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = toGivenUrlDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ToGivenUrlDeleteRequestBuilder {

        private ToGivenUrlDeleteRequestBuilder() {
        }

        /**
         * Build call for toGivenUrlDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return toGivenUrlDeleteCall(_callback);
        }


        /**
         * Execute toGivenUrlDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            toGivenUrlDeleteWithHttpInfo();
        }

        /**
         * Execute toGivenUrlDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return toGivenUrlDeleteWithHttpInfo();
        }

        /**
         * Execute toGivenUrlDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return toGivenUrlDeleteAsync(_callback);
        }
    }

    /**
     * 302/3XX Redirects to the given URL.
     * 
     * @return ToGivenUrlDeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
     </table>
     */
    public ToGivenUrlDeleteRequestBuilder toGivenUrlDelete() throws IllegalArgumentException {
        return new ToGivenUrlDeleteRequestBuilder();
    }
    private okhttp3.Call toGivenUrlGetCall(String url, Integer statusCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/redirect-to";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (statusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status_code", statusCode));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toGivenUrlGetValidateBeforeCall(String url, Integer statusCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling toGivenUrlGet(Async)");
        }

        return toGivenUrlGetCall(url, statusCode, _callback);

    }


    private ApiResponse<Void> toGivenUrlGetWithHttpInfo(String url, Integer statusCode) throws ApiException {
        okhttp3.Call localVarCall = toGivenUrlGetValidateBeforeCall(url, statusCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call toGivenUrlGetAsync(String url, Integer statusCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = toGivenUrlGetValidateBeforeCall(url, statusCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ToGivenUrlGetRequestBuilder {
        private final String url;
        private Integer statusCode;

        private ToGivenUrlGetRequestBuilder(String url) {
            this.url = url;
        }

        /**
         * Set statusCode
         * @param statusCode  (optional)
         * @return ToGivenUrlGetRequestBuilder
         */
        public ToGivenUrlGetRequestBuilder statusCode(Integer statusCode) {
            this.statusCode = statusCode;
            return this;
        }
        
        /**
         * Build call for toGivenUrlGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return toGivenUrlGetCall(url, statusCode, _callback);
        }


        /**
         * Execute toGivenUrlGet request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            toGivenUrlGetWithHttpInfo(url, statusCode);
        }

        /**
         * Execute toGivenUrlGet request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return toGivenUrlGetWithHttpInfo(url, statusCode);
        }

        /**
         * Execute toGivenUrlGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return toGivenUrlGetAsync(url, statusCode, _callback);
        }
    }

    /**
     * 302/3XX Redirects to the given URL.
     * 
     * @param url  (required)
     * @return ToGivenUrlGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
     </table>
     */
    public ToGivenUrlGetRequestBuilder toGivenUrlGet(String url) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        return new ToGivenUrlGetRequestBuilder(url);
    }
    private okhttp3.Call toGivenUrlPatchCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/redirect-to";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toGivenUrlPatchValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return toGivenUrlPatchCall(_callback);

    }


    private ApiResponse<Void> toGivenUrlPatchWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = toGivenUrlPatchValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call toGivenUrlPatchAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = toGivenUrlPatchValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ToGivenUrlPatchRequestBuilder {

        private ToGivenUrlPatchRequestBuilder() {
        }

        /**
         * Build call for toGivenUrlPatch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return toGivenUrlPatchCall(_callback);
        }


        /**
         * Execute toGivenUrlPatch request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            toGivenUrlPatchWithHttpInfo();
        }

        /**
         * Execute toGivenUrlPatch request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return toGivenUrlPatchWithHttpInfo();
        }

        /**
         * Execute toGivenUrlPatch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return toGivenUrlPatchAsync(_callback);
        }
    }

    /**
     * 302/3XX Redirects to the given URL.
     * 
     * @return ToGivenUrlPatchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
     </table>
     */
    public ToGivenUrlPatchRequestBuilder toGivenUrlPatch() throws IllegalArgumentException {
        return new ToGivenUrlPatchRequestBuilder();
    }
    private okhttp3.Call toGivenUrlPostCall(RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = redirectsToGivenUrlPostRequest;

        // create path and map variables
        String localVarPath = "/redirect-to";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toGivenUrlPostValidateBeforeCall(RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'redirectsToGivenUrlPostRequest' is set
        if (redirectsToGivenUrlPostRequest == null) {
            throw new ApiException("Missing the required parameter 'redirectsToGivenUrlPostRequest' when calling toGivenUrlPost(Async)");
        }

        return toGivenUrlPostCall(redirectsToGivenUrlPostRequest, _callback);

    }


    private ApiResponse<Void> toGivenUrlPostWithHttpInfo(RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest) throws ApiException {
        okhttp3.Call localVarCall = toGivenUrlPostValidateBeforeCall(redirectsToGivenUrlPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call toGivenUrlPostAsync(RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = toGivenUrlPostValidateBeforeCall(redirectsToGivenUrlPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ToGivenUrlPostRequestBuilder {
        private final String url;
        private Integer statusCode;

        private ToGivenUrlPostRequestBuilder(String url) {
            this.url = url;
        }

        /**
         * Set statusCode
         * @param statusCode  (optional)
         * @return ToGivenUrlPostRequestBuilder
         */
        public ToGivenUrlPostRequestBuilder statusCode(Integer statusCode) {
            this.statusCode = statusCode;
            return this;
        }
        
        /**
         * Build call for toGivenUrlPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest = buildBodyParams();
            return toGivenUrlPostCall(redirectsToGivenUrlPostRequest, _callback);
        }

        private RedirectsToGivenUrlPostRequest buildBodyParams() {
            RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest = new RedirectsToGivenUrlPostRequest();
            redirectsToGivenUrlPostRequest.url(this.url);
            redirectsToGivenUrlPostRequest.statusCode(this.statusCode);
            return redirectsToGivenUrlPostRequest;
        }

        /**
         * Execute toGivenUrlPost request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest = buildBodyParams();
            toGivenUrlPostWithHttpInfo(redirectsToGivenUrlPostRequest);
        }

        /**
         * Execute toGivenUrlPost request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest = buildBodyParams();
            return toGivenUrlPostWithHttpInfo(redirectsToGivenUrlPostRequest);
        }

        /**
         * Execute toGivenUrlPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            RedirectsToGivenUrlPostRequest redirectsToGivenUrlPostRequest = buildBodyParams();
            return toGivenUrlPostAsync(redirectsToGivenUrlPostRequest, _callback);
        }
    }

    /**
     * 302/3XX Redirects to the given URL.
     * 
     * @param redirectsToGivenUrlPostRequest  (required)
     * @return ToGivenUrlPostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
     </table>
     */
    public ToGivenUrlPostRequestBuilder toGivenUrlPost(String url) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        return new ToGivenUrlPostRequestBuilder(url);
    }
    private okhttp3.Call toGivenUrlTraceCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/redirect-to";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "TRACE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toGivenUrlTraceValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return toGivenUrlTraceCall(_callback);

    }


    private ApiResponse<Void> toGivenUrlTraceWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = toGivenUrlTraceValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call toGivenUrlTraceAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = toGivenUrlTraceValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ToGivenUrlTraceRequestBuilder {

        private ToGivenUrlTraceRequestBuilder() {
        }

        /**
         * Build call for toGivenUrlTrace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return toGivenUrlTraceCall(_callback);
        }


        /**
         * Execute toGivenUrlTrace request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            toGivenUrlTraceWithHttpInfo();
        }

        /**
         * Execute toGivenUrlTrace request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return toGivenUrlTraceWithHttpInfo();
        }

        /**
         * Execute toGivenUrlTrace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return toGivenUrlTraceAsync(_callback);
        }
    }

    /**
     * 302/3XX Redirects to the given URL.
     * 
     * @return ToGivenUrlTraceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> A redirection. </td><td>  -  </td></tr>
     </table>
     */
    public ToGivenUrlTraceRequestBuilder toGivenUrlTrace() throws IllegalArgumentException {
        return new ToGivenUrlTraceRequestBuilder();
    }
}

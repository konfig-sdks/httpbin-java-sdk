/*
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DynamicDataApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DynamicDataApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DynamicDataApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call decodeBase64urlStringCall(String value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base64/{value}"
            .replace("{" + "value" + "}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decodeBase64urlStringValidateBeforeCall(String value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling decodeBase64urlString(Async)");
        }

        return decodeBase64urlStringCall(value, _callback);

    }


    private ApiResponse<Void> decodeBase64urlStringWithHttpInfo(String value) throws ApiException {
        okhttp3.Call localVarCall = decodeBase64urlStringValidateBeforeCall(value, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call decodeBase64urlStringAsync(String value, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = decodeBase64urlStringValidateBeforeCall(value, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DecodeBase64urlStringRequestBuilder {
        private final String value;

        private DecodeBase64urlStringRequestBuilder(String value) {
            this.value = value;
        }

        /**
         * Build call for decodeBase64urlString
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decoded base64 content. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return decodeBase64urlStringCall(value, _callback);
        }


        /**
         * Execute decodeBase64urlString request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decoded base64 content. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            decodeBase64urlStringWithHttpInfo(value);
        }

        /**
         * Execute decodeBase64urlString request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decoded base64 content. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return decodeBase64urlStringWithHttpInfo(value);
        }

        /**
         * Execute decodeBase64urlString request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Decoded base64 content. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return decodeBase64urlStringAsync(value, _callback);
        }
    }

    /**
     * Decodes base64url-encoded string.
     * 
     * @param value  (required)
     * @return DecodeBase64urlStringRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Decoded base64 content. </td><td>  -  </td></tr>
     </table>
     */
    public DecodeBase64urlStringRequestBuilder decodeBase64urlString(String value) throws IllegalArgumentException {
        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        return new DecodeBase64urlStringRequestBuilder(value);
    }
    private okhttp3.Call delayedResponseDeleteCall(Integer delay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delay/{delay}"
            .replace("{" + "delay" + "}", localVarApiClient.escapeString(delay.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delayedResponseDeleteValidateBeforeCall(Integer delay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delay' is set
        if (delay == null) {
            throw new ApiException("Missing the required parameter 'delay' when calling delayedResponseDelete(Async)");
        }

        return delayedResponseDeleteCall(delay, _callback);

    }


    private ApiResponse<Void> delayedResponseDeleteWithHttpInfo(Integer delay) throws ApiException {
        okhttp3.Call localVarCall = delayedResponseDeleteValidateBeforeCall(delay, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call delayedResponseDeleteAsync(Integer delay, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delayedResponseDeleteValidateBeforeCall(delay, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DelayedResponseDeleteRequestBuilder {
        private final Integer delay;

        private DelayedResponseDeleteRequestBuilder(Integer delay) {
            this.delay = delay;
        }

        /**
         * Build call for delayedResponseDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return delayedResponseDeleteCall(delay, _callback);
        }


        /**
         * Execute delayedResponseDelete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            delayedResponseDeleteWithHttpInfo(delay);
        }

        /**
         * Execute delayedResponseDelete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return delayedResponseDeleteWithHttpInfo(delay);
        }

        /**
         * Execute delayedResponseDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return delayedResponseDeleteAsync(delay, _callback);
        }
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @return DelayedResponseDeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public DelayedResponseDeleteRequestBuilder delayedResponseDelete(Integer delay) throws IllegalArgumentException {
        if (delay == null) throw new IllegalArgumentException("\"delay\" is required but got null");
        return new DelayedResponseDeleteRequestBuilder(delay);
    }
    private okhttp3.Call delayedResponseGetCall(Integer delay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delay/{delay}"
            .replace("{" + "delay" + "}", localVarApiClient.escapeString(delay.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call delayedResponseGetValidateBeforeCall(Integer delay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delay' is set
        if (delay == null) {
            throw new ApiException("Missing the required parameter 'delay' when calling delayedResponseGet(Async)");
        }

        return delayedResponseGetCall(delay, _callback);

    }


    private ApiResponse<Void> delayedResponseGetWithHttpInfo(Integer delay) throws ApiException {
        okhttp3.Call localVarCall = delayedResponseGetValidateBeforeCall(delay, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call delayedResponseGetAsync(Integer delay, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = delayedResponseGetValidateBeforeCall(delay, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DelayedResponseGetRequestBuilder {
        private final Integer delay;

        private DelayedResponseGetRequestBuilder(Integer delay) {
            this.delay = delay;
        }

        /**
         * Build call for delayedResponseGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return delayedResponseGetCall(delay, _callback);
        }


        /**
         * Execute delayedResponseGet request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            delayedResponseGetWithHttpInfo(delay);
        }

        /**
         * Execute delayedResponseGet request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return delayedResponseGetWithHttpInfo(delay);
        }

        /**
         * Execute delayedResponseGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return delayedResponseGetAsync(delay, _callback);
        }
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @return DelayedResponseGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public DelayedResponseGetRequestBuilder delayedResponseGet(Integer delay) throws IllegalArgumentException {
        if (delay == null) throw new IllegalArgumentException("\"delay\" is required but got null");
        return new DelayedResponseGetRequestBuilder(delay);
    }
    private okhttp3.Call dripDataOverDurationCall(Double duration, Integer numbytes, Integer code, Double delay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drip";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        if (numbytes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numbytes", numbytes));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (delay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delay", delay));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dripDataOverDurationValidateBeforeCall(Double duration, Integer numbytes, Integer code, Double delay, final ApiCallback _callback) throws ApiException {
        return dripDataOverDurationCall(duration, numbytes, code, delay, _callback);

    }


    private ApiResponse<Void> dripDataOverDurationWithHttpInfo(Double duration, Integer numbytes, Integer code, Double delay) throws ApiException {
        okhttp3.Call localVarCall = dripDataOverDurationValidateBeforeCall(duration, numbytes, code, delay, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call dripDataOverDurationAsync(Double duration, Integer numbytes, Integer code, Double delay, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dripDataOverDurationValidateBeforeCall(duration, numbytes, code, delay, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DripDataOverDurationRequestBuilder {
        private Double duration;
        private Integer numbytes;
        private Integer code;
        private Double delay;

        private DripDataOverDurationRequestBuilder() {
        }

        /**
         * Set duration
         * @param duration The amount of time (in seconds) over which to drip each byte (optional, default to 2)
         * @return DripDataOverDurationRequestBuilder
         */
        public DripDataOverDurationRequestBuilder duration(Double duration) {
            this.duration = duration;
            return this;
        }
        
        /**
         * Set numbytes
         * @param numbytes The number of bytes to respond with (optional, default to 10)
         * @return DripDataOverDurationRequestBuilder
         */
        public DripDataOverDurationRequestBuilder numbytes(Integer numbytes) {
            this.numbytes = numbytes;
            return this;
        }
        
        /**
         * Set code
         * @param code The response code that will be returned (optional, default to 200)
         * @return DripDataOverDurationRequestBuilder
         */
        public DripDataOverDurationRequestBuilder code(Integer code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set delay
         * @param delay The amount of time (in seconds) to delay before responding (optional, default to 2)
         * @return DripDataOverDurationRequestBuilder
         */
        public DripDataOverDurationRequestBuilder delay(Double delay) {
            this.delay = delay;
            return this;
        }
        
        /**
         * Build call for dripDataOverDuration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dripped response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return dripDataOverDurationCall(duration, numbytes, code, delay, _callback);
        }


        /**
         * Execute dripDataOverDuration request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dripped response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            dripDataOverDurationWithHttpInfo(duration, numbytes, code, delay);
        }

        /**
         * Execute dripDataOverDuration request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dripped response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return dripDataOverDurationWithHttpInfo(duration, numbytes, code, delay);
        }

        /**
         * Execute dripDataOverDuration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A dripped response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return dripDataOverDurationAsync(duration, numbytes, code, delay, _callback);
        }
    }

    /**
     * Drips data over a duration after an optional initial delay.
     * 
     * @return DripDataOverDurationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dripped response. </td><td>  -  </td></tr>
     </table>
     */
    public DripDataOverDurationRequestBuilder dripDataOverDuration() throws IllegalArgumentException {
        return new DripDataOverDurationRequestBuilder();
    }
    private okhttp3.Call generatePageContainingLinksCall(Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/links/{n}/{offset}"
            .replace("{" + "n" + "}", localVarApiClient.escapeString(n.toString()))
            .replace("{" + "offset" + "}", localVarApiClient.escapeString(offset.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generatePageContainingLinksValidateBeforeCall(Integer n, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling generatePageContainingLinks(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling generatePageContainingLinks(Async)");
        }

        return generatePageContainingLinksCall(n, offset, _callback);

    }


    private ApiResponse<Void> generatePageContainingLinksWithHttpInfo(Integer n, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = generatePageContainingLinksValidateBeforeCall(n, offset, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call generatePageContainingLinksAsync(Integer n, Integer offset, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = generatePageContainingLinksValidateBeforeCall(n, offset, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GeneratePageContainingLinksRequestBuilder {
        private final Integer n;
        private final Integer offset;

        private GeneratePageContainingLinksRequestBuilder(Integer n, Integer offset) {
            this.n = n;
            this.offset = offset;
        }

        /**
         * Build call for generatePageContainingLinks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> HTML links. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generatePageContainingLinksCall(n, offset, _callback);
        }


        /**
         * Execute generatePageContainingLinks request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> HTML links. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            generatePageContainingLinksWithHttpInfo(n, offset);
        }

        /**
         * Execute generatePageContainingLinks request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> HTML links. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return generatePageContainingLinksWithHttpInfo(n, offset);
        }

        /**
         * Execute generatePageContainingLinks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> HTML links. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return generatePageContainingLinksAsync(n, offset, _callback);
        }
    }

    /**
     * Generate a page containing n links to other pages which do the same.
     * 
     * @param n  (required)
     * @param offset  (required)
     * @return GeneratePageContainingLinksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTML links. </td><td>  -  </td></tr>
     </table>
     */
    public GeneratePageContainingLinksRequestBuilder generatePageContainingLinks(Integer n, Integer offset) throws IllegalArgumentException {
        if (n == null) throw new IllegalArgumentException("\"n\" is required but got null");
        if (offset == null) throw new IllegalArgumentException("\"offset\" is required but got null");
        return new GeneratePageContainingLinksRequestBuilder(n, offset);
    }
    private okhttp3.Call generateUuidCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uuid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateUuidValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return generateUuidCall(_callback);

    }


    private ApiResponse<Void> generateUuidWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = generateUuidValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call generateUuidAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateUuidValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GenerateUuidRequestBuilder {

        private GenerateUuidRequestBuilder() {
        }

        /**
         * Build call for generateUuid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A UUID4. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateUuidCall(_callback);
        }


        /**
         * Execute generateUuid request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A UUID4. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            generateUuidWithHttpInfo();
        }

        /**
         * Execute generateUuid request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A UUID4. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return generateUuidWithHttpInfo();
        }

        /**
         * Execute generateUuid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A UUID4. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return generateUuidAsync(_callback);
        }
    }

    /**
     * Return a UUID4.
     * 
     * @return GenerateUuidRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A UUID4. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateUuidRequestBuilder generateUuid() throws IllegalArgumentException {
        return new GenerateUuidRequestBuilder();
    }
    private okhttp3.Call getRandomBytesCall(Integer n, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bytes/{n}"
            .replace("{" + "n" + "}", localVarApiClient.escapeString(n.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRandomBytesValidateBeforeCall(Integer n, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling getRandomBytes(Async)");
        }

        return getRandomBytesCall(n, _callback);

    }


    private ApiResponse<Void> getRandomBytesWithHttpInfo(Integer n) throws ApiException {
        okhttp3.Call localVarCall = getRandomBytesValidateBeforeCall(n, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getRandomBytesAsync(Integer n, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRandomBytesValidateBeforeCall(n, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetRandomBytesRequestBuilder {
        private final Integer n;

        private GetRandomBytesRequestBuilder(Integer n) {
            this.n = n;
        }

        /**
         * Build call for getRandomBytes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRandomBytesCall(n, _callback);
        }


        /**
         * Execute getRandomBytes request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getRandomBytesWithHttpInfo(n);
        }

        /**
         * Execute getRandomBytes request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getRandomBytesWithHttpInfo(n);
        }

        /**
         * Execute getRandomBytes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getRandomBytesAsync(n, _callback);
        }
    }

    /**
     * Returns n random bytes generated with given seed
     * 
     * @param n  (required)
     * @return GetRandomBytesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public GetRandomBytesRequestBuilder getRandomBytes(Integer n) throws IllegalArgumentException {
        if (n == null) throw new IllegalArgumentException("\"n\" is required but got null");
        return new GetRandomBytesRequestBuilder(n);
    }
    private okhttp3.Call returnDelayedResponseCall(Integer delay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delay/{delay}"
            .replace("{" + "delay" + "}", localVarApiClient.escapeString(delay.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnDelayedResponseValidateBeforeCall(Integer delay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delay' is set
        if (delay == null) {
            throw new ApiException("Missing the required parameter 'delay' when calling returnDelayedResponse(Async)");
        }

        return returnDelayedResponseCall(delay, _callback);

    }


    private ApiResponse<Void> returnDelayedResponseWithHttpInfo(Integer delay) throws ApiException {
        okhttp3.Call localVarCall = returnDelayedResponseValidateBeforeCall(delay, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call returnDelayedResponseAsync(Integer delay, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnDelayedResponseValidateBeforeCall(delay, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReturnDelayedResponseRequestBuilder {
        private final Integer delay;

        private ReturnDelayedResponseRequestBuilder(Integer delay) {
            this.delay = delay;
        }

        /**
         * Build call for returnDelayedResponse
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return returnDelayedResponseCall(delay, _callback);
        }


        /**
         * Execute returnDelayedResponse request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            returnDelayedResponseWithHttpInfo(delay);
        }

        /**
         * Execute returnDelayedResponse request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return returnDelayedResponseWithHttpInfo(delay);
        }

        /**
         * Execute returnDelayedResponse request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return returnDelayedResponseAsync(delay, _callback);
        }
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @return ReturnDelayedResponseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public ReturnDelayedResponseRequestBuilder returnDelayedResponse(Integer delay) throws IllegalArgumentException {
        if (delay == null) throw new IllegalArgumentException("\"delay\" is required but got null");
        return new ReturnDelayedResponseRequestBuilder(delay);
    }
    private okhttp3.Call returnDelayedResponseTraceCall(Integer delay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delay/{delay}"
            .replace("{" + "delay" + "}", localVarApiClient.escapeString(delay.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "TRACE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnDelayedResponseTraceValidateBeforeCall(Integer delay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delay' is set
        if (delay == null) {
            throw new ApiException("Missing the required parameter 'delay' when calling returnDelayedResponseTrace(Async)");
        }

        return returnDelayedResponseTraceCall(delay, _callback);

    }


    private ApiResponse<Void> returnDelayedResponseTraceWithHttpInfo(Integer delay) throws ApiException {
        okhttp3.Call localVarCall = returnDelayedResponseTraceValidateBeforeCall(delay, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call returnDelayedResponseTraceAsync(Integer delay, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnDelayedResponseTraceValidateBeforeCall(delay, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReturnDelayedResponseTraceRequestBuilder {
        private final Integer delay;

        private ReturnDelayedResponseTraceRequestBuilder(Integer delay) {
            this.delay = delay;
        }

        /**
         * Build call for returnDelayedResponseTrace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return returnDelayedResponseTraceCall(delay, _callback);
        }


        /**
         * Execute returnDelayedResponseTrace request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            returnDelayedResponseTraceWithHttpInfo(delay);
        }

        /**
         * Execute returnDelayedResponseTrace request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return returnDelayedResponseTraceWithHttpInfo(delay);
        }

        /**
         * Execute returnDelayedResponseTrace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return returnDelayedResponseTraceAsync(delay, _callback);
        }
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @return ReturnDelayedResponseTraceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public ReturnDelayedResponseTraceRequestBuilder returnDelayedResponseTrace(Integer delay) throws IllegalArgumentException {
        if (delay == null) throw new IllegalArgumentException("\"delay\" is required but got null");
        return new ReturnDelayedResponseTraceRequestBuilder(delay);
    }
    private okhttp3.Call returnDelayedResponse_0Call(Integer delay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delay/{delay}"
            .replace("{" + "delay" + "}", localVarApiClient.escapeString(delay.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnDelayedResponse_0ValidateBeforeCall(Integer delay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delay' is set
        if (delay == null) {
            throw new ApiException("Missing the required parameter 'delay' when calling returnDelayedResponse_0(Async)");
        }

        return returnDelayedResponse_0Call(delay, _callback);

    }


    private ApiResponse<Void> returnDelayedResponse_0WithHttpInfo(Integer delay) throws ApiException {
        okhttp3.Call localVarCall = returnDelayedResponse_0ValidateBeforeCall(delay, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call returnDelayedResponse_0Async(Integer delay, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnDelayedResponse_0ValidateBeforeCall(delay, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReturnDelayedResponse0RequestBuilder {
        private final Integer delay;

        private ReturnDelayedResponse0RequestBuilder(Integer delay) {
            this.delay = delay;
        }

        /**
         * Build call for returnDelayedResponse_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return returnDelayedResponse_0Call(delay, _callback);
        }


        /**
         * Execute returnDelayedResponse_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            returnDelayedResponse_0WithHttpInfo(delay);
        }

        /**
         * Execute returnDelayedResponse_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return returnDelayedResponse_0WithHttpInfo(delay);
        }

        /**
         * Execute returnDelayedResponse_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return returnDelayedResponse_0Async(delay, _callback);
        }
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @return ReturnDelayedResponse0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public ReturnDelayedResponse0RequestBuilder returnDelayedResponse_0(Integer delay) throws IllegalArgumentException {
        if (delay == null) throw new IllegalArgumentException("\"delay\" is required but got null");
        return new ReturnDelayedResponse0RequestBuilder(delay);
    }
    private okhttp3.Call returnDelayedResponse_1Call(Integer delay, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delay/{delay}"
            .replace("{" + "delay" + "}", localVarApiClient.escapeString(delay.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnDelayedResponse_1ValidateBeforeCall(Integer delay, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delay' is set
        if (delay == null) {
            throw new ApiException("Missing the required parameter 'delay' when calling returnDelayedResponse_1(Async)");
        }

        return returnDelayedResponse_1Call(delay, _callback);

    }


    private ApiResponse<Void> returnDelayedResponse_1WithHttpInfo(Integer delay) throws ApiException {
        okhttp3.Call localVarCall = returnDelayedResponse_1ValidateBeforeCall(delay, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call returnDelayedResponse_1Async(Integer delay, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnDelayedResponse_1ValidateBeforeCall(delay, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReturnDelayedResponse1RequestBuilder {
        private final Integer delay;

        private ReturnDelayedResponse1RequestBuilder(Integer delay) {
            this.delay = delay;
        }

        /**
         * Build call for returnDelayedResponse_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return returnDelayedResponse_1Call(delay, _callback);
        }


        /**
         * Execute returnDelayedResponse_1 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            returnDelayedResponse_1WithHttpInfo(delay);
        }

        /**
         * Execute returnDelayedResponse_1 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return returnDelayedResponse_1WithHttpInfo(delay);
        }

        /**
         * Execute returnDelayedResponse_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return returnDelayedResponse_1Async(delay, _callback);
        }
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     * 
     * @param delay  (required)
     * @return ReturnDelayedResponse1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A delayed response. </td><td>  -  </td></tr>
     </table>
     */
    public ReturnDelayedResponse1RequestBuilder returnDelayedResponse_1(Integer delay) throws IllegalArgumentException {
        if (delay == null) throw new IllegalArgumentException("\"delay\" is required but got null");
        return new ReturnDelayedResponse1RequestBuilder(delay);
    }
    private okhttp3.Call streamJsonResponsesCall(Integer n, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream/{n}"
            .replace("{" + "n" + "}", localVarApiClient.escapeString(n.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamJsonResponsesValidateBeforeCall(Integer n, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling streamJsonResponses(Async)");
        }

        return streamJsonResponsesCall(n, _callback);

    }


    private ApiResponse<Void> streamJsonResponsesWithHttpInfo(Integer n) throws ApiException {
        okhttp3.Call localVarCall = streamJsonResponsesValidateBeforeCall(n, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call streamJsonResponsesAsync(Integer n, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamJsonResponsesValidateBeforeCall(n, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StreamJsonResponsesRequestBuilder {
        private final Integer n;

        private StreamJsonResponsesRequestBuilder(Integer n) {
            this.n = n;
        }

        /**
         * Build call for streamJsonResponses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Streamed JSON responses. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return streamJsonResponsesCall(n, _callback);
        }


        /**
         * Execute streamJsonResponses request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Streamed JSON responses. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            streamJsonResponsesWithHttpInfo(n);
        }

        /**
         * Execute streamJsonResponses request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Streamed JSON responses. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return streamJsonResponsesWithHttpInfo(n);
        }

        /**
         * Execute streamJsonResponses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Streamed JSON responses. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return streamJsonResponsesAsync(n, _callback);
        }
    }

    /**
     * Stream n JSON responses
     * 
     * @param n  (required)
     * @return StreamJsonResponsesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Streamed JSON responses. </td><td>  -  </td></tr>
     </table>
     */
    public StreamJsonResponsesRequestBuilder streamJsonResponses(Integer n) throws IllegalArgumentException {
        if (n == null) throw new IllegalArgumentException("\"n\" is required but got null");
        return new StreamJsonResponsesRequestBuilder(n);
    }
    private okhttp3.Call streamRandomBytesCall(Integer numbytes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/range/{numbytes}"
            .replace("{" + "numbytes" + "}", localVarApiClient.escapeString(numbytes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamRandomBytesValidateBeforeCall(Integer numbytes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'numbytes' is set
        if (numbytes == null) {
            throw new ApiException("Missing the required parameter 'numbytes' when calling streamRandomBytes(Async)");
        }

        return streamRandomBytesCall(numbytes, _callback);

    }


    private ApiResponse<Void> streamRandomBytesWithHttpInfo(Integer numbytes) throws ApiException {
        okhttp3.Call localVarCall = streamRandomBytesValidateBeforeCall(numbytes, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call streamRandomBytesAsync(Integer numbytes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamRandomBytesValidateBeforeCall(numbytes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StreamRandomBytesRequestBuilder {
        private final Integer numbytes;

        private StreamRandomBytesRequestBuilder(Integer numbytes) {
            this.numbytes = numbytes;
        }

        /**
         * Build call for streamRandomBytes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return streamRandomBytesCall(numbytes, _callback);
        }


        /**
         * Execute streamRandomBytes request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            streamRandomBytesWithHttpInfo(numbytes);
        }

        /**
         * Execute streamRandomBytes request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return streamRandomBytesWithHttpInfo(numbytes);
        }

        /**
         * Execute streamRandomBytes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return streamRandomBytesAsync(numbytes, _callback);
        }
    }

    /**
     * Streams n random bytes generated with given seed, at given chunk size per packet.
     * 
     * @param numbytes  (required)
     * @return StreamRandomBytesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public StreamRandomBytesRequestBuilder streamRandomBytes(Integer numbytes) throws IllegalArgumentException {
        if (numbytes == null) throw new IllegalArgumentException("\"numbytes\" is required but got null");
        return new StreamRandomBytesRequestBuilder(numbytes);
    }
    private okhttp3.Call streamRandomBytes_0Call(Integer n, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream-bytes/{n}"
            .replace("{" + "n" + "}", localVarApiClient.escapeString(n.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamRandomBytes_0ValidateBeforeCall(Integer n, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'n' is set
        if (n == null) {
            throw new ApiException("Missing the required parameter 'n' when calling streamRandomBytes_0(Async)");
        }

        return streamRandomBytes_0Call(n, _callback);

    }


    private ApiResponse<Void> streamRandomBytes_0WithHttpInfo(Integer n) throws ApiException {
        okhttp3.Call localVarCall = streamRandomBytes_0ValidateBeforeCall(n, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call streamRandomBytes_0Async(Integer n, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamRandomBytes_0ValidateBeforeCall(n, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class StreamRandomBytes0RequestBuilder {
        private final Integer n;

        private StreamRandomBytes0RequestBuilder(Integer n) {
            this.n = n;
        }

        /**
         * Build call for streamRandomBytes_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return streamRandomBytes_0Call(n, _callback);
        }


        /**
         * Execute streamRandomBytes_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            streamRandomBytes_0WithHttpInfo(n);
        }

        /**
         * Execute streamRandomBytes_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return streamRandomBytes_0WithHttpInfo(n);
        }

        /**
         * Execute streamRandomBytes_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return streamRandomBytes_0Async(n, _callback);
        }
    }

    /**
     * Streams n random bytes generated with given seed, at given chunk size per packet.
     * 
     * @param n  (required)
     * @return StreamRandomBytes0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Bytes. </td><td>  -  </td></tr>
     </table>
     */
    public StreamRandomBytes0RequestBuilder streamRandomBytes_0(Integer n) throws IllegalArgumentException {
        if (n == null) throw new IllegalArgumentException("\"n\" is required but got null");
        return new StreamRandomBytes0RequestBuilder(n);
    }
}

/*
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ResponseInspectionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResponseInspectionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ResponseInspectionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cacheControlSetCall(Integer value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cache/{value}"
            .replace("{" + "value" + "}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cacheControlSetValidateBeforeCall(Integer value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling cacheControlSet(Async)");
        }

        return cacheControlSetCall(value, _callback);

    }


    private ApiResponse<Void> cacheControlSetWithHttpInfo(Integer value) throws ApiException {
        okhttp3.Call localVarCall = cacheControlSetValidateBeforeCall(value, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call cacheControlSetAsync(Integer value, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cacheControlSetValidateBeforeCall(value, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CacheControlSetRequestBuilder {
        private final Integer value;

        private CacheControlSetRequestBuilder(Integer value) {
            this.value = value;
        }

        /**
         * Build call for cacheControlSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cache control set </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cacheControlSetCall(value, _callback);
        }


        /**
         * Execute cacheControlSet request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cache control set </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            cacheControlSetWithHttpInfo(value);
        }

        /**
         * Execute cacheControlSet request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cache control set </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return cacheControlSetWithHttpInfo(value);
        }

        /**
         * Execute cacheControlSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cache control set </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return cacheControlSetAsync(value, _callback);
        }
    }

    /**
     * Sets a Cache-Control header for n seconds.
     * 
     * @param value  (required)
     * @return CacheControlSetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cache control set </td><td>  -  </td></tr>
     </table>
     */
    public CacheControlSetRequestBuilder cacheControlSet(Integer value) throws IllegalArgumentException {
        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
        return new CacheControlSetRequestBuilder(value);
    }
    private okhttp3.Call getResponseHeadersCall(Map<String, String> freeform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/response-headers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (freeform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("freeform", freeform));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResponseHeadersValidateBeforeCall(Map<String, String> freeform, final ApiCallback _callback) throws ApiException {
        return getResponseHeadersCall(freeform, _callback);

    }


    private ApiResponse<Void> getResponseHeadersWithHttpInfo(Map<String, String> freeform) throws ApiException {
        okhttp3.Call localVarCall = getResponseHeadersValidateBeforeCall(freeform, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getResponseHeadersAsync(Map<String, String> freeform, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResponseHeadersValidateBeforeCall(freeform, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetResponseHeadersRequestBuilder {
        private Map<String, String> freeform;

        private GetResponseHeadersRequestBuilder() {
        }

        /**
         * Set freeform
         * @param freeform  (optional)
         * @return GetResponseHeadersRequestBuilder
         */
        public GetResponseHeadersRequestBuilder freeform(Map<String, String> freeform) {
            this.freeform = freeform;
            return this;
        }
        
        /**
         * Build call for getResponseHeaders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getResponseHeadersCall(freeform, _callback);
        }


        /**
         * Execute getResponseHeaders request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getResponseHeadersWithHttpInfo(freeform);
        }

        /**
         * Execute getResponseHeaders request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getResponseHeadersWithHttpInfo(freeform);
        }

        /**
         * Execute getResponseHeaders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getResponseHeadersAsync(freeform, _callback);
        }
    }

    /**
     * Returns a set of response headers from the query string.
     * 
     * @return GetResponseHeadersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
     </table>
     */
    public GetResponseHeadersRequestBuilder getResponseHeaders() throws IllegalArgumentException {
        return new GetResponseHeadersRequestBuilder();
    }
    private okhttp3.Call notModifiedGetCall(String ifModifiedSince, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cache";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notModifiedGetValidateBeforeCall(String ifModifiedSince, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        return notModifiedGetCall(ifModifiedSince, ifNoneMatch, _callback);

    }


    private ApiResponse<Void> notModifiedGetWithHttpInfo(String ifModifiedSince, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = notModifiedGetValidateBeforeCall(ifModifiedSince, ifNoneMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call notModifiedGetAsync(String ifModifiedSince, String ifNoneMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notModifiedGetValidateBeforeCall(ifModifiedSince, ifNoneMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class NotModifiedGetRequestBuilder {
        private String ifModifiedSince;
        private String ifNoneMatch;

        private NotModifiedGetRequestBuilder() {
        }

        /**
         * Set ifModifiedSince
         * @param ifModifiedSince  (optional)
         * @return NotModifiedGetRequestBuilder
         */
        public NotModifiedGetRequestBuilder ifModifiedSince(String ifModifiedSince) {
            this.ifModifiedSince = ifModifiedSince;
            return this;
        }
        
        /**
         * Set ifNoneMatch
         * @param ifNoneMatch  (optional)
         * @return NotModifiedGetRequestBuilder
         */
        public NotModifiedGetRequestBuilder ifNoneMatch(String ifNoneMatch) {
            this.ifNoneMatch = ifNoneMatch;
            return this;
        }
        
        /**
         * Build call for notModifiedGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cached response </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Modified </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return notModifiedGetCall(ifModifiedSince, ifNoneMatch, _callback);
        }


        /**
         * Execute notModifiedGet request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cached response </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Modified </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            notModifiedGetWithHttpInfo(ifModifiedSince, ifNoneMatch);
        }

        /**
         * Execute notModifiedGet request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cached response </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Modified </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return notModifiedGetWithHttpInfo(ifModifiedSince, ifNoneMatch);
        }

        /**
         * Execute notModifiedGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Cached response </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> Modified </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return notModifiedGetAsync(ifModifiedSince, ifNoneMatch, _callback);
        }
    }

    /**
     * Returns a 304 if an If-Modified-Since header or If-None-Match is present. Returns the same as a GET otherwise.
     * 
     * @return NotModifiedGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cached response </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Modified </td><td>  -  </td></tr>
     </table>
     */
    public NotModifiedGetRequestBuilder notModifiedGet() throws IllegalArgumentException {
        return new NotModifiedGetRequestBuilder();
    }
    private okhttp3.Call queryHeadersGetCall(Map<String, String> freeform, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/response-headers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (freeform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("freeform", freeform));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryHeadersGetValidateBeforeCall(Map<String, String> freeform, final ApiCallback _callback) throws ApiException {
        return queryHeadersGetCall(freeform, _callback);

    }


    private ApiResponse<Void> queryHeadersGetWithHttpInfo(Map<String, String> freeform) throws ApiException {
        okhttp3.Call localVarCall = queryHeadersGetValidateBeforeCall(freeform, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call queryHeadersGetAsync(Map<String, String> freeform, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryHeadersGetValidateBeforeCall(freeform, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class QueryHeadersGetRequestBuilder {
        private Map<String, String> freeform;

        private QueryHeadersGetRequestBuilder() {
        }

        /**
         * Set freeform
         * @param freeform  (optional)
         * @return QueryHeadersGetRequestBuilder
         */
        public QueryHeadersGetRequestBuilder freeform(Map<String, String> freeform) {
            this.freeform = freeform;
            return this;
        }
        
        /**
         * Build call for queryHeadersGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryHeadersGetCall(freeform, _callback);
        }


        /**
         * Execute queryHeadersGet request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            queryHeadersGetWithHttpInfo(freeform);
        }

        /**
         * Execute queryHeadersGet request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return queryHeadersGetWithHttpInfo(freeform);
        }

        /**
         * Execute queryHeadersGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return queryHeadersGetAsync(freeform, _callback);
        }
    }

    /**
     * Returns a set of response headers from the query string.
     * 
     * @return QueryHeadersGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response headers </td><td>  -  </td></tr>
     </table>
     */
    public QueryHeadersGetRequestBuilder queryHeadersGet() throws IllegalArgumentException {
        return new QueryHeadersGetRequestBuilder();
    }
    private okhttp3.Call resourceInspectionGetCall(String ifNoneMatch, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etag/{etag}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceInspectionGetValidateBeforeCall(String ifNoneMatch, String ifMatch, final ApiCallback _callback) throws ApiException {
        return resourceInspectionGetCall(ifNoneMatch, ifMatch, _callback);

    }


    private ApiResponse<Void> resourceInspectionGetWithHttpInfo(String ifNoneMatch, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = resourceInspectionGetValidateBeforeCall(ifNoneMatch, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call resourceInspectionGetAsync(String ifNoneMatch, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceInspectionGetValidateBeforeCall(ifNoneMatch, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ResourceInspectionGetRequestBuilder {
        private String ifNoneMatch;
        private String ifMatch;

        private ResourceInspectionGetRequestBuilder() {
        }

        /**
         * Set ifNoneMatch
         * @param ifNoneMatch  (optional)
         * @return ResourceInspectionGetRequestBuilder
         */
        public ResourceInspectionGetRequestBuilder ifNoneMatch(String ifNoneMatch) {
            this.ifNoneMatch = ifNoneMatch;
            return this;
        }
        
        /**
         * Set ifMatch
         * @param ifMatch  (optional)
         * @return ResourceInspectionGetRequestBuilder
         */
        public ResourceInspectionGetRequestBuilder ifMatch(String ifMatch) {
            this.ifMatch = ifMatch;
            return this;
        }
        
        /**
         * Build call for resourceInspectionGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Normal response </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> match </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resourceInspectionGetCall(ifNoneMatch, ifMatch, _callback);
        }


        /**
         * Execute resourceInspectionGet request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Normal response </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> match </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            resourceInspectionGetWithHttpInfo(ifNoneMatch, ifMatch);
        }

        /**
         * Execute resourceInspectionGet request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Normal response </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> match </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return resourceInspectionGetWithHttpInfo(ifNoneMatch, ifMatch);
        }

        /**
         * Execute resourceInspectionGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Normal response </td><td>  -  </td></tr>
            <tr><td> 412 </td><td> match </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return resourceInspectionGetAsync(ifNoneMatch, ifMatch, _callback);
        }
    }

    /**
     * Assumes the resource has the given etag and responds to If-None-Match and If-Match headers appropriately.
     * 
     * @return ResourceInspectionGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Normal response </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> match </td><td>  -  </td></tr>
     </table>
     */
    public ResourceInspectionGetRequestBuilder resourceInspectionGet() throws IllegalArgumentException {
        return new ResourceInspectionGetRequestBuilder();
    }
}

/*
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call digestAuthPromptCall(String qop, String user, String passwd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digest-auth/{qop}/{user}/{passwd}"
            .replace("{" + "qop" + "}", localVarApiClient.escapeString(qop.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "passwd" + "}", localVarApiClient.escapeString(passwd.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call digestAuthPromptValidateBeforeCall(String qop, String user, String passwd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qop' is set
        if (qop == null) {
            throw new ApiException("Missing the required parameter 'qop' when calling digestAuthPrompt(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling digestAuthPrompt(Async)");
        }

        // verify the required parameter 'passwd' is set
        if (passwd == null) {
            throw new ApiException("Missing the required parameter 'passwd' when calling digestAuthPrompt(Async)");
        }

        return digestAuthPromptCall(qop, user, passwd, _callback);

    }


    private ApiResponse<Void> digestAuthPromptWithHttpInfo(String qop, String user, String passwd) throws ApiException {
        okhttp3.Call localVarCall = digestAuthPromptValidateBeforeCall(qop, user, passwd, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call digestAuthPromptAsync(String qop, String user, String passwd, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = digestAuthPromptValidateBeforeCall(qop, user, passwd, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DigestAuthPromptRequestBuilder {
        private final String qop;
        private final String user;
        private final String passwd;

        private DigestAuthPromptRequestBuilder(String qop, String user, String passwd) {
            this.qop = qop;
            this.user = user;
            this.passwd = passwd;
        }

        /**
         * Build call for digestAuthPrompt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return digestAuthPromptCall(qop, user, passwd, _callback);
        }


        /**
         * Execute digestAuthPrompt request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            digestAuthPromptWithHttpInfo(qop, user, passwd);
        }

        /**
         * Execute digestAuthPrompt request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return digestAuthPromptWithHttpInfo(qop, user, passwd);
        }

        /**
         * Execute digestAuthPrompt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return digestAuthPromptAsync(qop, user, passwd, _callback);
        }
    }

    /**
     * Prompts the user for authorization using Digest Auth.
     * 
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @return DigestAuthPromptRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public DigestAuthPromptRequestBuilder digestAuthPrompt(String qop, String user, String passwd) throws IllegalArgumentException {
        if (qop == null) throw new IllegalArgumentException("\"qop\" is required but got null");
            

        if (user == null) throw new IllegalArgumentException("\"user\" is required but got null");
            

        if (passwd == null) throw new IllegalArgumentException("\"passwd\" is required but got null");
            

        return new DigestAuthPromptRequestBuilder(qop, user, passwd);
    }
    private okhttp3.Call promptAuthorizationCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bearer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promptAuthorizationValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        return promptAuthorizationCall(authorization, _callback);

    }


    private ApiResponse<Void> promptAuthorizationWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = promptAuthorizationValidateBeforeCall(authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call promptAuthorizationAsync(String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = promptAuthorizationValidateBeforeCall(authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PromptAuthorizationRequestBuilder {
        private String authorization;

        private PromptAuthorizationRequestBuilder() {
        }

        /**
         * Set authorization
         * @param authorization  (optional)
         * @return PromptAuthorizationRequestBuilder
         */
        public PromptAuthorizationRequestBuilder authorization(String authorization) {
            this.authorization = authorization;
            return this;
        }
        
        /**
         * Build call for promptAuthorization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return promptAuthorizationCall(authorization, _callback);
        }


        /**
         * Execute promptAuthorization request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            promptAuthorizationWithHttpInfo(authorization);
        }

        /**
         * Execute promptAuthorization request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return promptAuthorizationWithHttpInfo(authorization);
        }

        /**
         * Execute promptAuthorization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return promptAuthorizationAsync(authorization, _callback);
        }
    }

    /**
     * Prompts the user for authorization using bearer authentication.
     * 
     * @return PromptAuthorizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public PromptAuthorizationRequestBuilder promptAuthorization() throws IllegalArgumentException {
        return new PromptAuthorizationRequestBuilder();
    }
    private okhttp3.Call promptAuthorizationUsingDigestCall(String qop, String user, String passwd, String algorithm, String staleAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digest-auth/{qop}/{user}/{passwd}/{algorithm}/{stale_after}"
            .replace("{" + "qop" + "}", localVarApiClient.escapeString(qop.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "passwd" + "}", localVarApiClient.escapeString(passwd.toString()))
            .replace("{" + "algorithm" + "}", localVarApiClient.escapeString(algorithm.toString()))
            .replace("{" + "stale_after" + "}", localVarApiClient.escapeString(staleAfter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promptAuthorizationUsingDigestValidateBeforeCall(String qop, String user, String passwd, String algorithm, String staleAfter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qop' is set
        if (qop == null) {
            throw new ApiException("Missing the required parameter 'qop' when calling promptAuthorizationUsingDigest(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling promptAuthorizationUsingDigest(Async)");
        }

        // verify the required parameter 'passwd' is set
        if (passwd == null) {
            throw new ApiException("Missing the required parameter 'passwd' when calling promptAuthorizationUsingDigest(Async)");
        }

        // verify the required parameter 'algorithm' is set
        if (algorithm == null) {
            throw new ApiException("Missing the required parameter 'algorithm' when calling promptAuthorizationUsingDigest(Async)");
        }

        // verify the required parameter 'staleAfter' is set
        if (staleAfter == null) {
            throw new ApiException("Missing the required parameter 'staleAfter' when calling promptAuthorizationUsingDigest(Async)");
        }

        return promptAuthorizationUsingDigestCall(qop, user, passwd, algorithm, staleAfter, _callback);

    }


    private ApiResponse<Void> promptAuthorizationUsingDigestWithHttpInfo(String qop, String user, String passwd, String algorithm, String staleAfter) throws ApiException {
        okhttp3.Call localVarCall = promptAuthorizationUsingDigestValidateBeforeCall(qop, user, passwd, algorithm, staleAfter, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call promptAuthorizationUsingDigestAsync(String qop, String user, String passwd, String algorithm, String staleAfter, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = promptAuthorizationUsingDigestValidateBeforeCall(qop, user, passwd, algorithm, staleAfter, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PromptAuthorizationUsingDigestRequestBuilder {
        private final String qop;
        private final String user;
        private final String passwd;
        private final String algorithm;
        private final String staleAfter;

        private PromptAuthorizationUsingDigestRequestBuilder(String qop, String user, String passwd, String algorithm, String staleAfter) {
            this.qop = qop;
            this.user = user;
            this.passwd = passwd;
            this.algorithm = algorithm;
            this.staleAfter = staleAfter;
        }

        /**
         * Build call for promptAuthorizationUsingDigest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return promptAuthorizationUsingDigestCall(qop, user, passwd, algorithm, staleAfter, _callback);
        }


        /**
         * Execute promptAuthorizationUsingDigest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            promptAuthorizationUsingDigestWithHttpInfo(qop, user, passwd, algorithm, staleAfter);
        }

        /**
         * Execute promptAuthorizationUsingDigest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return promptAuthorizationUsingDigestWithHttpInfo(qop, user, passwd, algorithm, staleAfter);
        }

        /**
         * Execute promptAuthorizationUsingDigest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return promptAuthorizationUsingDigestAsync(qop, user, passwd, algorithm, staleAfter, _callback);
        }
    }

    /**
     * Prompts the user for authorization using Digest Auth + Algorithm.
     * allow settings the stale_after argument. 
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @param algorithm MD5, SHA-256, SHA-512 (required)
     * @param staleAfter  (required)
     * @return PromptAuthorizationUsingDigestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public PromptAuthorizationUsingDigestRequestBuilder promptAuthorizationUsingDigest(String qop, String user, String passwd, String algorithm, String staleAfter) throws IllegalArgumentException {
        if (qop == null) throw new IllegalArgumentException("\"qop\" is required but got null");
            

        if (user == null) throw new IllegalArgumentException("\"user\" is required but got null");
            

        if (passwd == null) throw new IllegalArgumentException("\"passwd\" is required but got null");
            

        if (algorithm == null) throw new IllegalArgumentException("\"algorithm\" is required but got null");
            

        if (staleAfter == null) throw new IllegalArgumentException("\"staleAfter\" is required but got null");
            

        return new PromptAuthorizationUsingDigestRequestBuilder(qop, user, passwd, algorithm, staleAfter);
    }
    private okhttp3.Call promptAuthorizationUsingHttpGetCall(String user, String passwd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/basic-auth/{user}/{passwd}"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "passwd" + "}", localVarApiClient.escapeString(passwd.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promptAuthorizationUsingHttpGetValidateBeforeCall(String user, String passwd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling promptAuthorizationUsingHttpGet(Async)");
        }

        // verify the required parameter 'passwd' is set
        if (passwd == null) {
            throw new ApiException("Missing the required parameter 'passwd' when calling promptAuthorizationUsingHttpGet(Async)");
        }

        return promptAuthorizationUsingHttpGetCall(user, passwd, _callback);

    }


    private ApiResponse<Void> promptAuthorizationUsingHttpGetWithHttpInfo(String user, String passwd) throws ApiException {
        okhttp3.Call localVarCall = promptAuthorizationUsingHttpGetValidateBeforeCall(user, passwd, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call promptAuthorizationUsingHttpGetAsync(String user, String passwd, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = promptAuthorizationUsingHttpGetValidateBeforeCall(user, passwd, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PromptAuthorizationUsingHttpGetRequestBuilder {
        private final String user;
        private final String passwd;

        private PromptAuthorizationUsingHttpGetRequestBuilder(String user, String passwd) {
            this.user = user;
            this.passwd = passwd;
        }

        /**
         * Build call for promptAuthorizationUsingHttpGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return promptAuthorizationUsingHttpGetCall(user, passwd, _callback);
        }


        /**
         * Execute promptAuthorizationUsingHttpGet request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            promptAuthorizationUsingHttpGetWithHttpInfo(user, passwd);
        }

        /**
         * Execute promptAuthorizationUsingHttpGet request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return promptAuthorizationUsingHttpGetWithHttpInfo(user, passwd);
        }

        /**
         * Execute promptAuthorizationUsingHttpGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return promptAuthorizationUsingHttpGetAsync(user, passwd, _callback);
        }
    }

    /**
     * Prompts the user for authorization using HTTP Basic Auth.
     * 
     * @param user  (required)
     * @param passwd  (required)
     * @return PromptAuthorizationUsingHttpGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public PromptAuthorizationUsingHttpGetRequestBuilder promptAuthorizationUsingHttpGet(String user, String passwd) throws IllegalArgumentException {
        if (user == null) throw new IllegalArgumentException("\"user\" is required but got null");
            

        if (passwd == null) throw new IllegalArgumentException("\"passwd\" is required but got null");
            

        return new PromptAuthorizationUsingHttpGetRequestBuilder(user, passwd);
    }
    private okhttp3.Call promptUserAuthorizationCall(String user, String passwd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hidden-basic-auth/{user}/{passwd}"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "passwd" + "}", localVarApiClient.escapeString(passwd.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call promptUserAuthorizationValidateBeforeCall(String user, String passwd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling promptUserAuthorization(Async)");
        }

        // verify the required parameter 'passwd' is set
        if (passwd == null) {
            throw new ApiException("Missing the required parameter 'passwd' when calling promptUserAuthorization(Async)");
        }

        return promptUserAuthorizationCall(user, passwd, _callback);

    }


    private ApiResponse<Void> promptUserAuthorizationWithHttpInfo(String user, String passwd) throws ApiException {
        okhttp3.Call localVarCall = promptUserAuthorizationValidateBeforeCall(user, passwd, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call promptUserAuthorizationAsync(String user, String passwd, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = promptUserAuthorizationValidateBeforeCall(user, passwd, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PromptUserAuthorizationRequestBuilder {
        private final String user;
        private final String passwd;

        private PromptUserAuthorizationRequestBuilder(String user, String passwd) {
            this.user = user;
            this.passwd = passwd;
        }

        /**
         * Build call for promptUserAuthorization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return promptUserAuthorizationCall(user, passwd, _callback);
        }


        /**
         * Execute promptUserAuthorization request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            promptUserAuthorizationWithHttpInfo(user, passwd);
        }

        /**
         * Execute promptUserAuthorization request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return promptUserAuthorizationWithHttpInfo(user, passwd);
        }

        /**
         * Execute promptUserAuthorization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return promptUserAuthorizationAsync(user, passwd, _callback);
        }
    }

    /**
     * Prompts the user for authorization using HTTP Basic Auth.
     * 
     * @param user  (required)
     * @param passwd  (required)
     * @return PromptUserAuthorizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public PromptUserAuthorizationRequestBuilder promptUserAuthorization(String user, String passwd) throws IllegalArgumentException {
        if (user == null) throw new IllegalArgumentException("\"user\" is required but got null");
            

        if (passwd == null) throw new IllegalArgumentException("\"passwd\" is required but got null");
            

        return new PromptUserAuthorizationRequestBuilder(user, passwd);
    }
    private okhttp3.Call userAuthorizationDigestCall(String qop, String user, String passwd, String algorithm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/digest-auth/{qop}/{user}/{passwd}/{algorithm}"
            .replace("{" + "qop" + "}", localVarApiClient.escapeString(qop.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()))
            .replace("{" + "passwd" + "}", localVarApiClient.escapeString(passwd.toString()))
            .replace("{" + "algorithm" + "}", localVarApiClient.escapeString(algorithm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAuthorizationDigestValidateBeforeCall(String qop, String user, String passwd, String algorithm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qop' is set
        if (qop == null) {
            throw new ApiException("Missing the required parameter 'qop' when calling userAuthorizationDigest(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling userAuthorizationDigest(Async)");
        }

        // verify the required parameter 'passwd' is set
        if (passwd == null) {
            throw new ApiException("Missing the required parameter 'passwd' when calling userAuthorizationDigest(Async)");
        }

        // verify the required parameter 'algorithm' is set
        if (algorithm == null) {
            throw new ApiException("Missing the required parameter 'algorithm' when calling userAuthorizationDigest(Async)");
        }

        return userAuthorizationDigestCall(qop, user, passwd, algorithm, _callback);

    }


    private ApiResponse<Void> userAuthorizationDigestWithHttpInfo(String qop, String user, String passwd, String algorithm) throws ApiException {
        okhttp3.Call localVarCall = userAuthorizationDigestValidateBeforeCall(qop, user, passwd, algorithm, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call userAuthorizationDigestAsync(String qop, String user, String passwd, String algorithm, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userAuthorizationDigestValidateBeforeCall(qop, user, passwd, algorithm, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UserAuthorizationDigestRequestBuilder {
        private final String qop;
        private final String user;
        private final String passwd;
        private final String algorithm;

        private UserAuthorizationDigestRequestBuilder(String qop, String user, String passwd, String algorithm) {
            this.qop = qop;
            this.user = user;
            this.passwd = passwd;
            this.algorithm = algorithm;
        }

        /**
         * Build call for userAuthorizationDigest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return userAuthorizationDigestCall(qop, user, passwd, algorithm, _callback);
        }


        /**
         * Execute userAuthorizationDigest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            userAuthorizationDigestWithHttpInfo(qop, user, passwd, algorithm);
        }

        /**
         * Execute userAuthorizationDigest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return userAuthorizationDigestWithHttpInfo(qop, user, passwd, algorithm);
        }

        /**
         * Execute userAuthorizationDigest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return userAuthorizationDigestAsync(qop, user, passwd, algorithm, _callback);
        }
    }

    /**
     * Prompts the user for authorization using Digest Auth + Algorithm.
     * 
     * @param qop auth or auth-int (required)
     * @param user  (required)
     * @param passwd  (required)
     * @param algorithm MD5, SHA-256, SHA-512 (required)
     * @return UserAuthorizationDigestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucessful authentication. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unsuccessful authentication. </td><td>  -  </td></tr>
     </table>
     */
    public UserAuthorizationDigestRequestBuilder userAuthorizationDigest(String qop, String user, String passwd, String algorithm) throws IllegalArgumentException {
        if (qop == null) throw new IllegalArgumentException("\"qop\" is required but got null");
            

        if (user == null) throw new IllegalArgumentException("\"user\" is required but got null");
            

        if (passwd == null) throw new IllegalArgumentException("\"passwd\" is required but got null");
            

        if (algorithm == null) throw new IllegalArgumentException("\"algorithm\" is required but got null");
            

        return new UserAuthorizationDigestRequestBuilder(qop, user, passwd, algorithm);
    }
}

/*
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DynamicDataApi
 */
@Disabled
public class DynamicDataApiTest {

    private static DynamicDataApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DynamicDataApi(apiClient);
    }

    /**
     * Decodes base64url-encoded string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void decodeBase64urlStringTest() throws ApiException {
        String value = null;
        api.decodeBase64urlString(value)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delayedResponseDeleteTest() throws ApiException {
        Integer delay = null;
        api.delayedResponseDelete(delay)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delayedResponseGetTest() throws ApiException {
        Integer delay = null;
        api.delayedResponseGet(delay)
                .execute();
        // TODO: test validations
    }

    /**
     * Drips data over a duration after an optional initial delay.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dripDataOverDurationTest() throws ApiException {
        Double duration = null;
        Integer numbytes = null;
        Integer code = null;
        Double delay = null;
        api.dripDataOverDuration()
                .duration(duration)
                .numbytes(numbytes)
                .code(code)
                .delay(delay)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate a page containing n links to other pages which do the same.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generatePageContainingLinksTest() throws ApiException {
        Integer n = null;
        Integer offset = null;
        api.generatePageContainingLinks(n, offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a UUID4.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateUuidTest() throws ApiException {
        api.generateUuid()
                .execute();
        // TODO: test validations
    }

    /**
     * Returns n random bytes generated with given seed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRandomBytesTest() throws ApiException {
        Integer n = null;
        api.getRandomBytes(n)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void returnDelayedResponseTest() throws ApiException {
        Integer delay = null;
        api.returnDelayedResponse(delay)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void returnDelayedResponseTraceTest() throws ApiException {
        Integer delay = null;
        api.returnDelayedResponseTrace(delay)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void returnDelayedResponse_0Test() throws ApiException {
        Integer delay = null;
        api.returnDelayedResponse_0(delay)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a delayed response (max of 10 seconds).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void returnDelayedResponse_1Test() throws ApiException {
        Integer delay = null;
        api.returnDelayedResponse_1(delay)
                .execute();
        // TODO: test validations
    }

    /**
     * Stream n JSON responses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamJsonResponsesTest() throws ApiException {
        Integer n = null;
        api.streamJsonResponses(n)
                .execute();
        // TODO: test validations
    }

    /**
     * Streams n random bytes generated with given seed, at given chunk size per packet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamRandomBytesTest() throws ApiException {
        Integer numbytes = null;
        api.streamRandomBytes(numbytes)
                .execute();
        // TODO: test validations
    }

    /**
     * Streams n random bytes generated with given seed, at given chunk size per packet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamRandomBytes_0Test() throws ApiException {
        Integer n = null;
        api.streamRandomBytes_0(n)
                .execute();
        // TODO: test validations
    }

}

/*
 * httpbin.org
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Disabled
public class AuthApiTest {

    private static AuthApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AuthApi(apiClient);
    }

    /**
     * Prompts the user for authorization using Digest Auth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void digestAuthPromptTest() throws ApiException {
        String qop = null;
        String user = null;
        String passwd = null;
        api.digestAuthPrompt(qop, user, passwd)
                .execute();
        // TODO: test validations
    }

    /**
     * Prompts the user for authorization using bearer authentication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void promptAuthorizationTest() throws ApiException {
        String authorization = null;
        api.promptAuthorization()
                .authorization(authorization)
                .execute();
        // TODO: test validations
    }

    /**
     * Prompts the user for authorization using Digest Auth + Algorithm.
     *
     * allow settings the stale_after argument. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void promptAuthorizationUsingDigestTest() throws ApiException {
        String qop = null;
        String user = null;
        String passwd = null;
        String algorithm = null;
        String staleAfter = null;
        api.promptAuthorizationUsingDigest(qop, user, passwd, algorithm, staleAfter)
                .execute();
        // TODO: test validations
    }

    /**
     * Prompts the user for authorization using HTTP Basic Auth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void promptAuthorizationUsingHttpGetTest() throws ApiException {
        String user = null;
        String passwd = null;
        api.promptAuthorizationUsingHttpGet(user, passwd)
                .execute();
        // TODO: test validations
    }

    /**
     * Prompts the user for authorization using HTTP Basic Auth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void promptUserAuthorizationTest() throws ApiException {
        String user = null;
        String passwd = null;
        api.promptUserAuthorization(user, passwd)
                .execute();
        // TODO: test validations
    }

    /**
     * Prompts the user for authorization using Digest Auth + Algorithm.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userAuthorizationDigestTest() throws ApiException {
        String qop = null;
        String user = null;
        String passwd = null;
        String algorithm = null;
        api.userAuthorizationDigest(qop, user, passwd, algorithm)
                .execute();
        // TODO: test validations
    }

}
